@isTest
private class TEST_WSDatosOfertas
{
	@isTest static void peticionEnviarConDatosIncorrectos() 
	{
		WSDatosOfertas.PeticionEnvioOferta peticion = new WSDatosOfertas.PeticionEnvioOferta();
		peticion.datosCliente = null;
		peticion.oportunidades = null;

		Test.startTest();
		String jDatos = WSDatosOfertas.enviar(peticion);
		Test.stopTest();

		WSDatosOfertas.Respuesta r = (WSDatosOfertas.Respuesta) JSON.deserialize(jDatos, WSDatosOfertas.Respuesta.class);

		System.debug('Respuesta: ' + r);

		System.assertEquals('701', r.resultado.codigo);
	}

	@isTest static void peticionEnviarConDatosCorrectosSoloCliente() 
	{
		WSDatosOfertas.PeticionEnvioOferta peticion = new WSDatosOfertas.PeticionEnvioOferta();
		peticion.datosCliente = new EntidadesWSClientesYOfertas.DatosCliente();
		peticion.datosCliente.nombre = 'Cliente Test';
        peticion.datosCliente.apellidos = 'NTS';
        peticion.datosCliente.dni = '63731990W';
        peticion.datosCliente.cif = 'G08245474';
        peticion.datosCliente.identificador ='1';
        peticion.datosCliente.compania = 'CompañíaTest';
        peticion.datosCliente.telefono = '123456789';
        peticion.datosCliente.telefonoMovil = '987654321';
        peticion.datosCliente.fax = '582369545';
        peticion.datosCliente.email = 'nts@test.com';
        peticion.datosCliente.calle = 'Calle Test';
        peticion.datosCliente.calleFacturacion = 'Calle Fact Test';
        peticion.datosCliente.provincia  = 'Bizkaia';
        peticion.datosCliente.provinciaFacturacion  = 'Barcelona';
        peticion.datosCliente.cp = '49923';
        peticion.datosCliente.cpFacturacion = '45620';
        peticion.datosCliente.actividad = 'Alimentación';
        peticion.datosCliente.poblacion = 'Población';
        peticion.datosCliente.poblacionFacturacion = 'Población Fact';
        peticion.datosCliente.subactividad = 'Conservera vegetales';
		//peticion.oportunidades = null;

		Test.startTest();
		String jDatos = WSDatosOfertas.enviar(peticion);
		Test.stopTest();

		WSDatosOfertas.Respuesta r = (WSDatosOfertas.Respuesta) JSON.deserialize(jDatos, WSDatosOfertas.Respuesta.class);

		System.debug('Respuesta: ' + r);

		System.assertEquals('700', r.resultado.codigo);

		Account acc = [select Id, Actividad__c from Account where Name ='CompañíaTest'];
		System.assertNotEquals(null, acc);
		System.assertEquals(peticion.datosCliente.actividad, acc.Actividad__c);

		List<Contact> listC = [select Id,LastName from Contact where FirstName = 'Cliente Test' and Phone ='123456789'];
		System.assertNotEquals(null, listC);
		System.assert(!listC.isEmpty());
		System.assertNotEquals(null,listC.get(0));
		System.assertEquals(peticion.datosCliente.apellidos, listC.get(0).LastName);
	}

	@isTest static void peticionEnviarConDatosCorrectos() 
	{
		List<Account> accs = new List<Account>();
		Account proveedor = new Account();
		proveedor.Name = 'Proveedor Test';
		proveedor.RecordTypeId = Util.objectsRecordTypesMap.get('Account').get('Partner').Id;
		accs.add(proveedor);
		Account competidor = new Account();
		competidor.Name = 'Competidor Test';
		competidor.RecordTypeId = Util.objectsRecordTypesMap.get('Account').get('Competidor').Id;
		accs.add(competidor);
		insert accs;

		WSDatosOfertas.PeticionEnvioOferta peticion = new WSDatosOfertas.PeticionEnvioOferta();
		peticion.datosCliente = new EntidadesWSClientesYOfertas.DatosCliente();
		peticion.datosCliente.nombre = 'Cliente Test';
        peticion.datosCliente.apellidos = 'NTS';
        peticion.datosCliente.dni = '63731990W';
        peticion.datosCliente.cif = 'G08245474';
        peticion.datosCliente.identificador ='1';
        peticion.datosCliente.compania = 'CompañíaTest';
        peticion.datosCliente.telefono = '123456789';
        peticion.datosCliente.telefonoMovil = '987654321';
        peticion.datosCliente.fax = '582369545';
        peticion.datosCliente.email = 'nts@test.com';
        peticion.datosCliente.calle = 'Calle Test';
        peticion.datosCliente.provincia  = 'Bizkaia';
        peticion.datosCliente.cp = '49923';
        peticion.datosCliente.actividad = 'Alimentación';
        peticion.datosCliente.poblacion = 'Población';
        peticion.datosCliente.subactividad = 'Conservera vegetales';
		peticion.oportunidades = new List<WSDatosOfertas.Oportunidad>();
		List<EntidadesWSClientesYOfertas.Oferta> ofertas = new List<EntidadesWSClientesYOfertas.Oferta>();
		EntidadesWSClientesYOfertas.Oferta oE = new EntidadesWSClientesYOfertas.Oferta('111');
		oE.tipo = Util.constantesNewSales.get('TIPO_OFERTA_ESTANDAR');
		oE.fechaCreacion = '2017-03-22 23:00:00';
		oE.fechaVigencia = '20170314';
		oE.duracionAnyos = '5';
		oE.estado = 'Preparando';
		oE.observaciones = 'Observaciones oE';
		oE.enviarEmail = '1';
		oE.resolucionAnticipada = '1200';
		oE.equiposInstalarPrimagas = new EntidadesWSClientesYOfertas.EquiposInstalarPrimagas('Contador;');
		EntidadesWSClientesYOfertas.Prioridades prioridadesO = new EntidadesWSClientesYOfertas.Prioridades();
		prioridadesO.comodidad = '1';
		prioridadesO.despreocuparse = '0';
		prioridadesO.enterrado = '1';
		prioridadesO.ahorroAnual = '0';
		prioridadesO.precioRegulado = '1';
		prioridadesO.pagarConsumo = '0';
		prioridadesO.precioFijo = '1';
		prioridadesO.tarifaPlana = '0';
		prioridadesO.impacto = '1';
		oE.prioridades = prioridadesO;
		oE.ahorroEstimado = new EntidadesWSClientesYOfertas.AhorroEstimado('100', '101', '102');
		EntidadesWSClientesYOfertas.Instalacion instOE = new EntidadesWSClientesYOfertas.Instalacion();
		EntidadesWSClientesYOfertas.Equipo equipoOE = new EntidadesWSClientesYOfertas.Equipo();
		equipoOE.nombre = 'EquipoOE';
		equipoOE.cantidad = '1';
		equipoOE.uso = 'UsoOE';
		equipoOE.potenciaKW = '2';
		equipoOE.antiguedad = '2016';
		equipoOE.energia = 'Electricidad';
		List<EntidadesWSClientesYOfertas.Equipo> equiposOE = new List<EntidadesWSClientesYOfertas.Equipo>();
		equiposOE.add(equipoOE);
		instOE.equipos = new List<EntidadesWSClientesYOfertas.Equipo>(equiposOE);
		EntidadesWSClientesYOfertas.Energia energiaOE = new EntidadesWSClientesYOfertas.Energia();
		energiaOE.nombre = 'EnergiaOE';
		energiaOE.consumo = '10';
		energiaOE.consumoKWH = '11';
		energiaOE.consumoKgCO2 = '13';
		energiaOE.consumoL_primagas = '14';
		energiaOE.consumoKWH_primagas = '15';
		energiaOE.consumoKg_primagas = '16';
		energiaOE.consumoKgCO2_primagas = '17';
		energiaOE.unidadConsumo = 'Kilos';
		energiaOE.precio = '18'; 
		energiaOE.unidadPrecio = 'Litros';
		energiaOE.proveedor = String.valueOf(competidor.Id);
		energiaOE.rendimiento = '19';
		energiaOE.cambio = 'Cambio OE';
		energiaOE.importeSituacionActual = '20';
		List<EntidadesWSClientesYOfertas.Energia> energiasOE = new List<EntidadesWSClientesYOfertas.Energia>();
		energiasOE.add(energiaOE);
		instOE.energias = new List<EntidadesWSClientesYOfertas.Energia>(energiasOE);
		instOE.total = new EntidadesWSClientesYOfertas.Total('20', '21', '22', '23', '24', '25', '26', '27');
		oE.instalacion = instOE;
		EntidadesWSClientesYOfertas.Estandar estandarOE = new EntidadesWSClientesYOfertas.Estandar();
		estandarOE.interior = 'IntEstandarTest';
		estandarOE.exterior = 'ExtEstandarTest';
		estandarOE.servicio = 'ServestandarTest';
		estandarOE.tarifa = 'TarifaTest';
		estandarOE.preciokg = '26';
		estandarOE.precioL = '27';
		estandarOE.servicioValor = '28';
		estandarOE.tipoOferta ='OfertaName';
		estandarOE.pagoInicial = '29';
		estandarOE.duracionDto = '30';
		estandarOE.consumoContratado = '9000 l (5000kg)';
		estandarOE.dto = '32';
		estandarOE.texto = 'Texto opción de servicio seleccionado';
		estandarOE.precioFecha = 'Precio SEP';
		estandarOE.idSalesforce = 'NameMaestroOfertaSTD';
		oE.estandar = estandarOE;
		ofertas.add(oE);
		EntidadesWSClientesYOfertas.Oferta oM = new EntidadesWSClientesYOfertas.Oferta('222');
		oM.tipo = Util.constantesNewSales.get('TIPO_OFERTA_MODULAR');
		oM.fechaCreacion = '2017-03-22 23:00:00';
		oM.fechaVigencia = '20170315';
		oM.duracionAnyos = '5';
		oM.estado = 'Preparando';
		oM.observaciones = 'Observaciones oM';
		oM.enviarEmail = '1';
		oM.resolucionAnticipada = '1201';
		oM.equiposInstalarPrimagas = new EntidadesWSClientesYOfertas.EquiposInstalarPrimagas('Contador;');
		oM.prioridades = prioridadesO;
		oM.ahorroEstimado = new EntidadesWSClientesYOfertas.AhorroEstimado('100', '101', '102');
		EntidadesWSClientesYOfertas.Instalacion instOM = new EntidadesWSClientesYOfertas.Instalacion();
		EntidadesWSClientesYOfertas.Equipo equipoOM = new EntidadesWSClientesYOfertas.Equipo();
		equipoOM.nombre = 'EquipoOM';
		equipoOM.cantidad = '1';
		equipoOM.uso = 'UsoOME';
		equipoOM.potenciaKW = '2';
		equipoOM.antiguedad = '2016';
		equipoOM.energia = 'Electricidad';
		List<EntidadesWSClientesYOfertas.Equipo> equiposOM = new List<EntidadesWSClientesYOfertas.Equipo>();
		equiposOM.add(equipoOM);
		instOM.equipos = new List<EntidadesWSClientesYOfertas.Equipo>(equiposOM);
		EntidadesWSClientesYOfertas.Energia energiaOM = new EntidadesWSClientesYOfertas.Energia();
		energiaOM.nombre = 'EnergiaOM';
		energiaOM.consumo = '10';
		energiaOM.consumoKWH = '11';
		energiaOM.consumoKgCO2 = '13';
		energiaOM.consumoL_primagas = '14';
		energiaOM.consumoKWH_primagas = '15';
		energiaOM.consumoKg_primagas = '16';
		energiaOM.consumoKgCO2_primagas = '17';
		energiaOM.unidadConsumo = 'Kilos';
		energiaOM.precio = '18'; 
		energiaOM.unidadPrecio = 'Litros';
		energiaOM.proveedor = String.valueOf(competidor.Id);
		energiaOM.rendimiento = '19';
		energiaOM.cambio = 'Cambio OM';
		energiaOM.importeSituacionActual = '20';
		List<EntidadesWSClientesYOfertas.Energia> energiasOM = new List<EntidadesWSClientesYOfertas.Energia>();
		energiasOM.add(energiaOM);
		instOM.energias = new List<EntidadesWSClientesYOfertas.Energia>(energiasOM);
		instOM.total = new EntidadesWSClientesYOfertas.Total('20', '21', '22', '23', '24', '25', '26', '27');
		oM.instalacion = instOM;
		EntidadesWSClientesYOfertas.InstalacionModular instMod = new EntidadesWSClientesYOfertas.InstalacionModular();
		instMod.equipoInterior = 'EquipoIntMod';
		instMod.costeEquipoInterior = '29';
		instMod.interior = '1';
		instMod.exterior = '0';
		instMod.costeInterior = '30';
		instMod.deposito = '31';
		instMod.costeDeposito = '32';
		instMod.costeExterior = '33';
		instMod.vallado = '1';
		instMod.costeVallado = '34';
		instMod.obraCivil = '0';
		instMod.costeObraCivil = '35';
		instMod.totalInversion = '36';
		instMod.totalfinanciable = '37';
		instMod.pagoInicial = '38';
		instMod.tipoInteres = '39';
		instMod.instalacionInterior = '45';
		instMod.proyectos = 'Proyecto';
		instMod.costeProyectos = '46';
		instMod.financiacionSeleccionada = 'Financia12';
		instMod.numeroCuotas = '40';
		instMod.importeCuotas = '41';
		instMod.importeDoceCuotas = '42';
		instMod.importeEnGasEurosL = '43';
		instMod.importeEnGasEurosKg = '44';
		instMod.importeAhorroInstalacion = '45';
		instMod.costeInstalacionInterior = '46';
		instMod.aplicaTramo = '1';
		EntidadesWSClientesYOfertas.Tramo trM = new EntidadesWSClientesYOfertas.Tramo();
		trM.tramo = 'TramoMod';
		trM.porcentajeDesde = '46';
		trM.porcentajeHasta = '47';
		trM.consumoDesdeL = '48';
		trM.consumoHastaL = '49';
		trM.consumoDesdeKg = '50';
		trM.consumoHastaKg = '51';
		trM.financiacionL = '52';
		trM.financiacionKg = '53';
		List<EntidadesWSClientesYOfertas.Tramo> tramosInstMod = new List<EntidadesWSClientesYOfertas.Tramo>();
		tramosInstMod.add(trM);
		instMod.tramos = new List<EntidadesWSClientesYOfertas.Tramo>(tramosInstMod);
		// crear Pack de customsetting para test
		Pack__c pack = new Pack__c();
		pack.Name = 'Pack1Test';
		pack.ConsumoMax__c = 70;
		pack.ImporteMensual__c = 71;
		pack.Nombre__c = 'NombreTest';
		pack.Numero_de_pack__c = 1;
		pack.Activo__c = true;
		insert pack;
		List<ServiciosPacks__c> listServsPacksM = new List<ServiciosPacks__c>();
		ServiciosPacks__c servPack = new ServiciosPacks__c();
		servPack.Importe_mensual__c = 10;
		servPack.Nombre__c = 'ServicioPack test1';
		servPack.Incluido__c = false;
		servPack.Numero_de_pack__c = 1;
		servPack.Name = 'ServicioPack test1';
		listServsPacksM.add(servPack);
		ServiciosPacks__c servPack2 = new ServiciosPacks__c();
		servPack2.Importe_mensual__c = 0;
		servPack2.Nombre__c = 'ServicioPack test2';
		servPack2.Incluido__c = true;
		servPack2.Numero_de_pack__c = 1;
		servPack2.Name = 'ServicioPack test2';
		listServsPacksM.add(servPack2);
		insert listServsPacksM;
		List<EntidadesWSClientesYOfertas.ServicioSeleccionado> listServPack = new List<EntidadesWSClientesYOfertas.ServicioSeleccionado>();
		listServPack.add(new EntidadesWSClientesYOfertas.ServicioSeleccionado(String.valueOf(servPack.Id)));
		EntidadesWSClientesYOfertas.Pack packM = new EntidadesWSClientesYOfertas.Pack();
		packM.packSeleccionado =  'Pack1Test';
		packM.totalImporte = '60';
		packM.serviciosSeleccionados = new List<EntidadesWSClientesYOfertas.ServicioSeleccionado>(listServPack);
		EntidadesWSClientesYOfertas.Producto proM = new EntidadesWSClientesYOfertas.Producto();
		proM.precioMensualL = '70';
		proM.precioFijoAnualL = '71';
		proM.contadorL = '72';
		proM.tarifaPlanaL = '73';
		proM.precioMensualKg = '74';
		proM.precioFijoAnualKg = '75';
		proM.contadorKg = '76';
		proM.tarifaPlanaKg = '77';
		proM.nivelPB = '1';
		proM.fecha = 'Precio JUL';
		proM.opcionSeleccionada = 'Mensual';
		proM.importeAhorroGas = '78';
		List<EntidadesWSClientesYOfertas.Deposito> deps = new List<EntidadesWSClientesYOfertas.Deposito>();
		EntidadesWSClientesYOfertas.Deposito dep = new EntidadesWSClientesYOfertas.Deposito();
		dep.tipo = 'TipoDepTest';
		dep.cantidad = '80';
		dep.equiposExterior = '81';
		dep.instalacionExterior = 'InstExt';
		dep.proyectos = '83';
		dep.obraCivilVallado = '84';
		deps.add(dep);
		List<EntidadesWSClientesYOfertas.EquipoAjuste> eqsAj = new List<EntidadesWSClientesYOfertas.EquipoAjuste>();
		EntidadesWSClientesYOfertas.EquipoAjuste eqAj = new EntidadesWSClientesYOfertas.EquipoAjuste();
		eqAj.nombre = 'EquipoAjTest';
		eqAj.cantidad = '10';
		eqAj.equiposExterior = '11';
		eqAj.instalacionExterior = '12';
		eqAj.equiposInterior = '13';
		eqAj.instalacionInterior = '14';
		eqsAj.add(eqAj);
		EntidadesWSClientesYOfertas.PagoInversion pagoInv = new EntidadesWSClientesYOfertas.PagoInversion();
		pagoInv.tipo = 'TarifTest';
		pagoInv.pagoIncial = '90';
		pagoInv.cuotaInversion = '91';
		pagoInv.duracionCuota = '92';
		pagoInv.dto1llenado = '93';
		EntidadesWSClientesYOfertas.ProductoGas prodGas = new EntidadesWSClientesYOfertas.ProductoGas();
		prodGas.tipo = 'TipoGasTest';
		prodGas.tarifa = 'TarifTest';
		prodGas.dto = '20';
		prodGas.duracionDto = '21';
		prodGas.precio = '22';
		EntidadesWSClientesYOfertas.PrimaServicios primaServ = new EntidadesWSClientesYOfertas.PrimaServicios();
		primaServ.tipo = 'PrimaServTest';
		primaServ.mto = '0';
		primaServ.inspeccionInterior = '1';
		primaServ.revisionInterior = '0';
		primaServ.precio = '30';
		List<EntidadesWSClientesYOfertas.Escalado> escs = new List<EntidadesWSClientesYOfertas.Escalado>();
		EntidadesWSClientesYOfertas.Escalado esc = new EntidadesWSClientesYOfertas.Escalado();
		esc.tramo = 'TrTest';
		esc.porcentajeDesde = '101';
		esc.porcentajeHasta = '102';
		esc.consumoDesdeL = '103';
		esc.consumoHastaL = '104';
		esc.consumoDesdeKg = '105';
		esc.consumoHastaKg = '106';
		esc.dtoL = '107';
		esc.dtoKg = '108';
		esc.duracionDTO = '109';
		esc.precioHoyL = '110';
		esc.precioHoyK = '111';
		esc.primaServiciosA = '112';
		esc.pba = '113';
		escs.add(esc);
		//EntidadesWSClientesYOfertas.Ajuste ajM = new EntidadesWSClientesYOfertas.Ajuste(deps, eqsAj, pagoInv, prodGas, primaServ, escs);
		EntidadesWSClientesYOfertas.Modular modON = new EntidadesWSClientesYOfertas.Modular(instMod, packM, proM);
		oM.modular = modON;
		ofertas.add(oM);
		EntidadesWSClientesYOfertas.Oferta oP = new EntidadesWSClientesYOfertas.Oferta('333');
		oP.tipo = Util.constantesNewSales.get('TIPO_OFERTA_PERSONALIZADA');
		oP.fechaCreacion = '2017-03-22 23:00:00';
		op.fechaVigencia = '20170316';
		oP.duracionAnyos = '5';
		oP.estado = 'Preparando';
		oP.observaciones = 'Observaciones oP';
		oP.enviarEmail = '1';
		oP.resolucionAnticipada = '1202';
		oP.equiposInstalarPrimagas = new EntidadesWSClientesYOfertas.EquiposInstalarPrimagas('Contador;');
		oP.prioridades = prioridadesO;
		oP.ahorroEstimado = new EntidadesWSClientesYOfertas.AhorroEstimado('100', '101', '102');
		EntidadesWSClientesYOfertas.Instalacion instOP = new EntidadesWSClientesYOfertas.Instalacion();
		EntidadesWSClientesYOfertas.Equipo equipoOP = new EntidadesWSClientesYOfertas.Equipo();
		equipoOP.nombre = 'EquipoOP';
		equipoOP.cantidad = '1';
		equipoOP.uso = 'UsoOME';
		equipoOP.potenciaKW = '2';
		equipoOP.antiguedad = '2016';
		equipoOP.energia = 'Electricidad';
		List<EntidadesWSClientesYOfertas.Equipo> equiposOP = new List<EntidadesWSClientesYOfertas.Equipo>();
		equiposOP.add(equipoOP);
		instOP.equipos = new List<EntidadesWSClientesYOfertas.Equipo>(equiposOP);
		EntidadesWSClientesYOfertas.Energia energiaOP = new EntidadesWSClientesYOfertas.Energia();
		energiaOP.nombre = 'EnergiaOP';
		energiaOP.consumo = '10';
		energiaOP.consumoKWH = '11';
		energiaOP.consumoKgCO2 = '13';
		energiaOP.consumoL_primagas = '14';
		energiaOP.consumoKWH_primagas = '15';
		energiaOP.consumoKg_primagas = '16';
		energiaOP.consumoKgCO2_primagas = '17';
		energiaOP.unidadConsumo = 'Kilos';
		energiaOP.precio = '18'; 
		energiaOP.unidadPrecio = 'Litros';
		energiaOP.proveedor = String.valueOf(competidor.Id);
		energiaOP.rendimiento = '19';
		energiaOP.cambio = 'Cambio OP';
		energiaOP.importeSituacionActual = '20';
		List<EntidadesWSClientesYOfertas.Energia> energiasOP = new List<EntidadesWSClientesYOfertas.Energia>();
		energiasOM.add(energiaOP);
		instOP.energias = new List<EntidadesWSClientesYOfertas.Energia>(energiasOP);
		instOP.total = new EntidadesWSClientesYOfertas.Total('20', '21', '22', '23', '24', '25', '26', '27');
		oP.instalacion = instOM;
		oP.personalizada = new EntidadesWSClientesYOfertas.Ajuste(deps, eqsAj, pagoInv, prodGas, primaServ, escs);
		ofertas.add(oP);
		WSDatosOfertas.Oportunidad oport = new WSDatosOfertas.Oportunidad('1', 'OppNameTest', String.valueOf(proveedor.Id), 'canalTest','2017-03-22 23:00:00', ofertas);
		peticion.oportunidades.add(oport);

		Test.startTest();
		String jDatos = WSDatosOfertas.enviar(peticion);
		Test.stopTest();

		WSDatosOfertas.Respuesta r = (WSDatosOfertas.Respuesta) JSON.deserialize(jDatos, WSDatosOfertas.Respuesta.class);

		System.debug('Respuesta: ' + r);

		System.assertEquals('700', r.resultado.codigo);
		System.assertNotEquals(null, r.ofertas);
		System.assertEquals(3, r.ofertas.size());

		Account acc = [select Id, Actividad__c from Account where Name ='CompañíaTest'];
		System.assertNotEquals(null, acc);
		System.assertEquals(peticion.datosCliente.actividad, acc.Actividad__c);

		Contact c = [select Id,LastName from Contact where FirstName = 'Cliente Test' and Phone ='123456789'];
		System.assertNotEquals(null, c);
		System.assertEquals(peticion.datosCliente.apellidos, c.LastName);

		Opportunity opp = [select Id from Opportunity where IdNewSales__c = '1'];
		System.assertNotEquals(null, opp);

		List<Quote> listQ = [select Id from Quote where OpportunityId = : opp.Id];
		System.assertNotEquals(null, listQ);
		System.assertEquals(3, listQ.size());

		List<Energia_actual__c> listEQ = [select Id from Energia_actual__c where Presupuesto__c = :listQ.get(0).Id];
		System.assertNotEquals(null, listEQ);
		System.assertEquals(1, listEQ.size());
	}
}