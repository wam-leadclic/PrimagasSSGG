@isTest
private class TEST_WSWebClientes
{
    @isTest static void loginWebTestErrorPeticionSinDatos()
    {
        WSWebClientes.RespuestaAcceso respuesta;
        WSWebClientes.PeticionAcceso peticion = new WSWebClientes.PeticionAcceso();
        peticion.username = '25291578L';
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.loginWeb(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.resultado.mensaje);
    }
    @isTest static void loginWebTestErrorSinInforamcion() 
    {
        WSWebClientes.RespuestaAcceso respuesta;
        WSWebClientes.PeticionAcceso peticion = new WSWebClientes.PeticionAcceso();
        peticion.username = '25291578L';
        peticion.password = EncodingUtil.base64Encode(Crypto.encrypt('AES128', Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf('TEST')));
        peticion.idioma = 'CAT';

        Test.startTest();
        respuesta = WSWebClientes.loginWeb(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_no_existe_usuario').get(WSWebClientes.IDIOMA_CAT_SALIDA), respuesta.resultado.mensaje);
    }
    @isTest static void loginWebTestErrorLoginIncorrecto() 
    {
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Segmento1__c= 'Canalizado';
        acc[0].Id_fiscal__c='25291578L';
        acc[0].Usuario_Web_Clientes__c ='25291578L';
        acc[0].Contrase_a_web_clientes__c='TEST';

        insert acc;

        WSWebClientes.RespuestaAcceso respuesta;
        WSWebClientes.PeticionAcceso peticion = new WSWebClientes.PeticionAcceso();
        peticion.username = '25291578L';
        peticion.password = EncodingUtil.base64Encode(Crypto.encrypt('AES128', Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf('TESTING')));
        peticion.idioma = 'CAT';

        Test.startTest();
        respuesta = WSWebClientes.loginWeb(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
    }
    @isTest static void loginWebTestErrorSegmentoIncorrecto() 
    {
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Segmento1__c= 'CAP - Canalizado Publico';
        acc[0].Id_fiscal__c='25291578L';
        acc[0].Usuario_Web_Clientes__c='25291578L';
        acc[0].Contrase_a_web_clientes__c='TEST';

        insert acc;

        WSWebClientes.RespuestaAcceso respuesta;
        WSWebClientes.PeticionAcceso peticion = new WSWebClientes.PeticionAcceso();
        peticion.username = '25291578L';
        peticion.password = EncodingUtil.base64Encode(Crypto.encrypt('AES128', Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf('TESTING')));
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.loginWeb(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
    }
    @isTest static void loginWebTest() 
    {
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Id_fiscal__c = '25291578L';
        acc[0].Usuario_Web_Clientes__c = '25291578L';
        acc[0].Segmento1__c = 'Canalizado';
        acc[0].Contrase_a_web_clientes__c = 'TEST';

        insert acc;

        List<Contact> contacto = Util.generarContactos(1, 0, acc);

        insert contacto;

        WSWebClientes.RespuestaAcceso respuesta;
        WSWebClientes.PeticionAcceso peticion = new WSWebClientes.PeticionAcceso();
        peticion.username = '25291578L';
        peticion.password = EncodingUtil.base64Encode(Crypto.encrypt('AES128', Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf('TEST')));
        peticion.idioma = 'ES';
        System.debug('peticion.password: ' + peticion.password);

        Test.startTest();
        respuesta = WSWebClientes.loginWeb(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('200', respuesta.resultado.codigo);
        System.assertNotEquals(null, respuesta.datosAcceso);
        System.assertEquals(acc[0].Id, respuesta.datosAcceso.idCliente);
        System.assertEquals(WSWebClientes.traducirSegmento(acc[0].Segmento1__c), respuesta.datosAcceso.segmento);
    }

    /*Prueba que junto al login se devuelven las preferencias de la cuenta*/
    @isTest
    static void loginWebTest_preferencias()
    {
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Id_fiscal__c = '25291578L';
        acc[0].Usuario_Web_Clientes__c = '25291578L';
        acc[0].Segmento1__c = 'Canalizado';
        acc[0].Contrase_a_web_clientes__c = 'TEST';

        //Account acc = new Account(FirstName='NombreTest', LastName='ApellidoTest', Id_fiscal__c='25291578L',Usuario_Web_Clientes__c='25291578L',Segmento1__c='Canalizado', Contrase_a_web_clientes__c='TEST', RecordTypeId=Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert acc;

        List<Contact> contactoPrincipal = Util.generarContactos(1, 0, acc);
        //contactoPrincipal[0].Contacto_Principal__c = true;
        insert contactoPrincipal;

        List<Individual> personasList = new List<Individual>([SELECT Id, Hash__c FROM Individual]);
        System.assert(!personasList.isEmpty());

        WSWebClientes.RespuestaAcceso respuesta;
        WSWebClientes.PeticionAcceso peticion = new WSWebClientes.PeticionAcceso();
        peticion.username = '25291578L';
        peticion.password = EncodingUtil.base64Encode(Crypto.encrypt('AES128', Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf('TEST')));
        peticion.idioma = 'ES';
        System.debug('peticion.password: ' + peticion.password);

        Test.startTest();
        respuesta = WSWebClientes.loginWeb(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('200', respuesta.resultado.codigo);
        System.assertNotEquals(null, respuesta.datosAcceso);
        System.assertEquals(acc[0].Id, respuesta.datosAcceso.idCliente);
        System.assertEquals(WSWebClientes.traducirSegmento(acc[0].Segmento1__c), respuesta.datosAcceso.segmento);
        System.assertEquals(false, respuesta.datosAcceso.modificado);
        //System.assertEquals(true, respuesta.datosAcceso.cuentaPersonal);
        System.assertEquals(true, respuesta.datosAcceso.encuestas);
        System.assertEquals(true, respuesta.datosAcceso.promociones);
    }

    //Cambios rfernandez (13/09/2017) Comentar este y descomentar el siguiente metodo para implementar los cambios de incidencias
    @isTest static void getTiposIncidenciasTest() 
    {
        // preparar datos
        TiposIncidencias__c ti = new TiposIncidencias__c(Name='ES_TipoTest1', Texto__c='TipoTest1', Idioma__c = 'ES');
        insert ti;

        WSWebClientes.RespuestaGetTiposIncidencias respuesta;
        WSWebClientes.PeticionGetTiposIncidencias peticion = new WSWebClientes.PeticionGetTiposIncidencias();
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getTiposIncidencias(peticion);
        Test.stopTest();

        System.debug(respuesta);

        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('200', respuesta.resultado.codigo);
        System.assertNotEquals(null, respuesta.tiposIncidencias);
        //System.assert(respuesta.tiposIncidencias.size() > 0); //Ahora no se obtienen tipos de incidencias sino temas
    }

    /*@isTest static void getTemasTest() 
    {
        // preparar datos
        TemasWebClientes__c ti = new TemasWebClientes__c(Name='ES_TipoTest1', Texto__c='TipoTest1', Idioma__c = 'ES');
        insert ti;

        WSWebClientes.RespuestaGetTiposIncidencias respuesta;
        WSWebClientes.PeticionGetTiposIncidencias peticion = new WSWebClientes.PeticionGetTiposIncidencias();
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getTiposIncidencias(peticion);
        Test.stopTest();

        System.debug('Respuesta de temas:'+respuesta);

        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('200', respuesta.resultado.codigo);
        System.assertNotEquals(null, respuesta.tiposIncidencias);
        System.assert(respuesta.tiposIncidencias.size() > 0); 
    }*/

    @isTest static void recuperarPasswordTestErrorPeticionSinDatos() 
    {
        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionRecuperarPassword peticion = new WSWebClientes.PeticionRecuperarPassword();

        Test.startTest();
        respuesta = WSWebClientes.recuperarPassword(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('501', respuesta.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.mensaje);
    }
    @isTest static void recuperarPasswordTestErrorSinInformacion() 
    {
        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionRecuperarPassword peticion = new WSWebClientes.PeticionRecuperarPassword();
        peticion.email = 'test@test.com';
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.recuperarPassword(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('501', respuesta.codigo);
    }
    @isTest static void recuperarPasswordTestErrorSegmentoIncorrecto() 
    {
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].E_mail__c ='lperez@nts-solutions.com';
        acc[0].Segmento1__c='CAP - Canalizado Publico';
        acc[0].Contrase_a_web_clientes__c='TEST';

        insert acc;

        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionRecuperarPassword peticion = new WSWebClientes.PeticionRecuperarPassword();
        peticion.email = 'lperez@nts-solutions.com';
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.recuperarPassword(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('501', respuesta.codigo);
    }
    @isTest static void recuperarPasswordTest() 
    {
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].E_mail__c ='lperez@nts-solutions.com';
        acc[0].Segmento1__c='Canalizado';
        acc[0].Contrase_a_web_clientes__c='TEST';

        insert acc;

        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionRecuperarPassword peticion = new WSWebClientes.PeticionRecuperarPassword();
        peticion.email = 'lperez@nts-solutions.com';
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.recuperarPassword(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('200', respuesta.codigo);
    }

    @isTest static void busquedaUsuariosTestErrorPeticionSinDatos()
    {
        WSWebClientes.RespuestaBusquedaUsuarios respuesta;
        WSWebClientes.PeticionBusquedaUsuarios peticion = null;

        Test.startTest();
        respuesta = WSWebClientes.busquedaUsuarios(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.resultado.mensaje);
    }
    @isTest static void busquedaUsuariosTestErrorPeticionSinFiltro()
    {
        WSWebClientes.RespuestaBusquedaUsuarios respuesta;
        WSWebClientes.PeticionBusquedaUsuarios peticion = new WSWebClientes.PeticionBusquedaUsuarios();
        peticion.filtros = new List<WSWebClientes.Filtro>();
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.busquedaUsuarios(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
    }
    @isTest static void busquedaUsuariosTestErrorPeticionSinInformacion()
    {
        WSWebClientes.RespuestaBusquedaUsuarios respuesta;
        WSWebClientes.PeticionBusquedaUsuarios peticion = new WSWebClientes.PeticionBusquedaUsuarios();
        peticion.filtros = new List<WSWebClientes.Filtro>();
        peticion.filtros.add(new WSWebClientes.Filtro('Name', 'test'));
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.busquedaUsuarios(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
    }
    @isTest static void busquedaUsuariosTest()
    {
        Canalizado_promotor__c can = new Canalizado_promotor__c(Name='CanalizadoTest', Id_Navision__c='1234');
        insert can;

        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Segmento1__c = 'Canalizado';
        acc[0].canalizado_promotor__c = can.Id;
        
        insert acc;

        WSWebClientes.RespuestaBusquedaUsuarios respuesta;
        WSWebClientes.PeticionBusquedaUsuarios peticion = new WSWebClientes.PeticionBusquedaUsuarios();
        peticion.filtros = new List<WSWebClientes.Filtro>();
        peticion.filtros.add(new WSWebClientes.Filtro('Name', 'test'));
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.busquedaUsuarios(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('200', respuesta.resultado.codigo);
        System.assertNotEquals(null, respuesta.usuarios);
        System.assertEquals(1, respuesta.usuarios.size());
        System.assertEquals(acc[0].Id, respuesta.usuarios.get(0).id);
        System.assertEquals(acc[0].Name, respuesta.usuarios.get(0).nombre);
        System.assertEquals(WSWebClientes.traducirSegmento(acc[0].Segmento1__c), respuesta.usuarios.get(0).segmento);
    }

    @isTest static void getDatosPersonalesTestErrorPeticionSinDatos()
    {
        WSWebClientes.RespuestaDatosPersonales respuesta;
        WSWebClientes.PeticionGetDatosPersonales peticion = new WSWebClientes.PeticionGetDatosPersonales();

        Test.startTest();
        respuesta = WSWebClientes.getDatosPersonales(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.resultado.mensaje);
    }
    @isTest static void getDatosPersonalesTestErrorSinInformacion()
    {
        WSWebClientes.RespuestaDatosPersonales respuesta;
        WSWebClientes.PeticionGetDatosPersonales peticion = new WSWebClientes.PeticionGetDatosPersonales();
        peticion.id = '001e000000korI3';
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getDatosPersonales(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo); 
    }
    @isTest static void getDatosPersonalesTest()
    {
        // preparar datos
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Phone = '258963256';
        insert acc;

        List<Contact> contactos = Util.generarContactos(1, 0, acc);
        insert contactos;

        Direcci_n_de_entrega__c dir = new Direcci_n_de_entrega__c(cuenta__c = acc[0].Id, Direccion__c='Dir1Test', Direccion_2__c='Dir2Test', Provincia__c='Bizkaia', Codigo_Postal__c= '23455', Poblacion__c='PoblTest');
        insert dir;

        Contract contr = new Contract(Name='ContrTest', AccountId = acc[0].Id, Duraci_n_del_contrato_a_os__c = '2', StartDate=Date.today().addYears(-1), ContractTerm=24);
        insert contr;
        contr.Status = 'Activado';
        update contr;

        WSWebClientes.RespuestaDatosPersonales respuesta;
        WSWebClientes.PeticionGetDatosPersonales peticion = new WSWebClientes.PeticionGetDatosPersonales();
        peticion.id = String.valueOf(acc[0].Id);
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getDatosPersonales(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('200', respuesta.resultado.codigo); 
        System.assertNotEquals(null, respuesta.datosPersonales);
        System.assertEquals(acc[0].Name, respuesta.datosPersonales.nombre);
        System.assertEquals(acc[0].Phone, respuesta.datosPersonales.numTelefono);
        System.assertNotEquals(null, respuesta.datosPersonales.direccionesServicio);
        System.assertEquals(1, respuesta.datosPersonales.direccionesServicio.size());
        System.assertEquals(dir.Direccion__c, respuesta.datosPersonales.direccionesServicio.get(0).direccionServicio);
        System.assertNotEquals(null, respuesta.datosPersonales.contratos);
        System.assertEquals(1, respuesta.datosPersonales.contratos.size());
        string fecha;
        string dia, mes, anyo;
        if(contr.StartDate == null )
        {
            fecha = '';
        }
        else
        {
            dia = String.valueOf(contr.StartDate.day());
            while( dia.length() < 2 )
                dia = '0' + dia;
            mes = String.valueOf(contr.StartDate.month());
            while( mes.length() < 2 )
                mes = '0' + mes;
            anyo = String.valueOf(contr.StartDate.year());
            while(anyo.length() < 4)
                anyo = '0' + anyo;
            fecha = anyo + mes + dia;
        }
        System.assertEquals(fecha, respuesta.datosPersonales.contratos.get(0).vigencia);
    }

     @isTest static void getDatosPersonalesTest_preferencias()
    {
        // preparar datos
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);

        //Account acc = new Account(FirstName='NombreTest', LastName='ApellidoTest', Phone='258963256', RecordTypeId=Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert acc;

        List<Contact> contactoPrincipal = Util.generarContactos(1, 0, acc);
        //contactoPrincipal[0].Contacto_Principal__c = true;
        insert contactoPrincipal;

        WSWebClientes.RespuestaDatosPersonales respuesta;
        WSWebClientes.PeticionGetDatosPersonales peticion = new WSWebClientes.PeticionGetDatosPersonales();
        peticion.id = String.valueOf(acc[0].Id);
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getDatosPersonales(peticion);
        Test.stopTest();
        
        System.assertEquals(true, respuesta.datosPersonales.promociones);
        System.assertEquals(true, respuesta.datosPersonales.encuestas);
        //System.assertEquals(true, respuesta.datosPersonales.cuentaPersonal);
        System.assertEquals(false, respuesta.datosPersonales.modificado);
    }

    @isTest static void updateDatosPersonalesTestErrorPeticionSinDatos()
    {
        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionUpdateDatosPersonales peticion = new WSWebClientes.PeticionUpdateDatosPersonales();

        Test.startTest();
        respuesta = WSWebClientes.updateDatosPersonales(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('501', respuesta.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.mensaje);
    }
    @isTest static void updateDatosPersonalesTestErrorSinInformacion()
    {
        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionUpdateDatosPersonales peticion = new WSWebClientes.PeticionUpdateDatosPersonales();
        peticion.id = '001e000000korI3';
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.updateDatosPersonales(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('501', respuesta.codigo);
    }
    @isTest static void updateDatosPersonalesTest()
    {
        // preparar datos
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Phone = '258963256';
        insert acc;

        List<Contact> contacto = Util.generarContactos(1, 0, acc);
        insert contacto;

        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionUpdateDatosPersonales peticion = new WSWebClientes.PeticionUpdateDatosPersonales();
        peticion.id = String.valueOf(acc[0].Id);
        peticion.direccion = 'Dirección Test, 5';
        peticion.cp = '45676';
        peticion.poblacion = 'Población Test';
        peticion.provincia = 'Bizkaia';
        peticion.movil = '234434534';
        peticion.numTelefono = '982732817';
        peticion.email = 'email@test.com';
        peticion.idioma = 'ES';
        peticion.encuestas = false;
        peticion.promociones = true;

        peticion.cuentaBancaria = EncodingUtil.base64Encode(Crypto.encrypt('AES128', Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf(Util.constantesWebClientes.get('KEY_CIFRADO_WEB')), Blob.valueOf('12341285123541235')));

        Test.startTest();
        respuesta = WSWebClientes.updateDatosPersonales(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('200', respuesta.codigo);

        List<Account> listAcc = [select Calle_Facturacion__c, BillingCity, Codigo_Postal__c from Account where Id = :acc[0].Id];
        System.assertNotEquals(null, listAcc);
        System.assertEquals(1, listAcc.size());
        System.assertEquals(peticion.direccion, listAcc.get(0).Calle_Facturacion__c);
        //System.assertEquals('12341285123541235', listAcc.get(0).Iban__c);
    }

    @isTest static void updateDatosPersonalesTest_preferencias()
    {
        // preparar datos
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Phone = '258963256';

        insert acc;

        List<Contact> contactoPrincipal = Util.generarContactos(1, 0, acc);

        insert contactoPrincipal;

        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionUpdateDatosPersonales peticion = new WSWebClientes.PeticionUpdateDatosPersonales();
        peticion.id             = String.valueOf(acc[0].Id);
        peticion.promociones    = true;
        peticion.encuestas      = true;
        peticion.ip             = '127.0.0.1';
        peticion.idioma         = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.updateDatosPersonales(peticion);
        Test.stopTest();
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('200', respuesta.codigo);

        List<Individual> personasList = new List<Individual>([SELECT Id, Hash__c, IP__c, Modificado__c, Modificado_desde__c, Encuestas_satisfaccion__c, Promociones__c, Fecha_encuestas__c, Fecha_promociones__c 
                                                                FROM Individual]);
        Individual persona = personasList[0];
        System.assertEquals(true, persona.Promociones__c);
        System.assertEquals(true, persona.Encuestas_satisfaccion__c);
        System.assertEquals('Web Clientes', persona.Modificado_desde__c);
        System.assertEquals(true, persona.Modificado__c);
        System.assertEquals(Date.today(), Date.newinstance(persona.Fecha_encuestas__c.year(), persona.Fecha_encuestas__c.month(), persona.Fecha_encuestas__c.day()));
        System.assertEquals(Date.today(), Date.newinstance(persona.Fecha_promociones__c.year(), persona.Fecha_promociones__c.month(), persona.Fecha_promociones__c.day()));
    }

    @isTest static void solicitarDuplicadoFacturaTestErrorPeticionSinDatos()
    {
        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionSolicitudDuplicadoFactura peticion = new WSWebClientes.PeticionSolicitudDuplicadoFactura();

        Test.startTest();
        respuesta = WSWebClientes.solicitarDuplicadoFactura(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('501', respuesta.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.mensaje);
    }
    @isTest static void solicitarDuplicadoFacturaTest()
    {
        // preparar datos
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);

        insert acc;

        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionSolicitudDuplicadoFactura peticion = new WSWebClientes.PeticionSolicitudDuplicadoFactura();
        peticion.cliente = acc[0].Id;
        peticion.comentarios = '55555 - Comentarios duplicado test';
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.solicitarDuplicadoFactura(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        //Comentado para subir a producción, este test no falla en PersonAcc

        /*System.assertNotEquals(null, respuesta);
        System.assertEquals('200', respuesta.codigo);

        List<Task> listTareas = [select Id, Description from Task where WhatId = :acc[0].Id and Subject = :WSWebClientes.textosWebClientesMap.get('Tarea_solicitud_duplicado_factura').get(WSWebClientes.IDIOMA_ES_SALIDA)];
        System.assertNotEquals(null, listTareas);
        System.assertEquals(1, listTareas.size());
        System.assertNotEquals(null, listTareas.get(0));
        System.assertEquals(peticion.comentarios, listTareas.get(0).Description);*/
    }

    @isTest static void getPromocionesTestErrorPeticionSinDatos()
    {
        WSWebClientes.RespuestaObtenerPromociones respuesta;
        WSWebClientes.PeticionObtenerPromociones peticion = new WSWebClientes.PeticionObtenerPromociones();

        Test.startTest();
        respuesta = WSWebClientes.getPromociones(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.resultado.mensaje);
    }
    @isTest static void getPromocionesTestErrorSinInformacion()
    {
        // preparar datos
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert acc;

        WSWebClientes.RespuestaObtenerPromociones respuesta;
        WSWebClientes.PeticionObtenerPromociones peticion = new WSWebClientes.PeticionObtenerPromociones();
        peticion.cliente = acc[0].Id;
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getPromociones(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
    }
    @isTest static void getPromocionesTestErrorSinPromosConImg()
    {
        // preparar datos
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert acc;

        Campaign camp = new Campaign(Name='campaña test', StartDate = Date.today(), Status='En curso', IsActive = true);
        insert camp;

        WSWebClientes.RespuestaObtenerPromociones respuesta;
        WSWebClientes.PeticionObtenerPromociones peticion = new WSWebClientes.PeticionObtenerPromociones();
        peticion.cliente = acc[0].Id;
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getPromociones(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('501', respuesta.resultado.codigo);
    }
    @isTest static void getPromocionesTest()
    {
        // preparar datos
        Campaign camp = new Campaign(Name='campaña test', StartDate = Date.today(), Status='En curso', URL_campa_a__c='http://www.google.es', IsActive = true);
        insert camp;

        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        acc[0].Campa_a_relacionada__c=camp.Id;
        insert acc;

        Blob img = EncodingUtil.base64Decode('');
        Attachment att = new Attachment();
        att.ParentId = camp.Id;  
        att.Name = WSWebClientes.NOMBRE_IMAGEN_PROMOCION + 'png';  
        att.body = img;
        insert att;

        WSWebClientes.RespuestaObtenerPromociones respuesta;
        WSWebClientes.PeticionObtenerPromociones peticion = new WSWebClientes.PeticionObtenerPromociones();
        peticion.cliente = acc[0].Id;
        peticion.idioma = 'ES';

        Test.startTest();
        respuesta = WSWebClientes.getPromociones(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertNotEquals(null, respuesta.resultado);
        System.assertEquals('200', respuesta.resultado.codigo);
        System.assertNotEquals(null, respuesta.promociones);
        System.assertEquals(1, respuesta.promociones.size());
        System.assertEquals(camp.Name, respuesta.promociones.get(0).nombrePromocion);
        System.assert(respuesta.promociones.get(0).inscrito);
    }

    @isTest static void enviarIncidenciaTestErrorPeticionSinDatos()
    {
        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionEnviarIncidencia peticion = new WSWebClientes.PeticionEnviarIncidencia();

        Test.startTest();
        respuesta = WSWebClientes.enviarIncidencia(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('501', respuesta.codigo);
        System.assertEquals(WSWebClientes.textosWebClientesMap.get('Error_peticion_datos_insuficientes').get(WSWebClientes.IDIOMA_ES_SALIDA), respuesta.mensaje);
    }
    @isTest static void enviarIncidenciaTest()
    {
        // preparar datos
        /*Account acc = new Account(Name='CuentaTest', RecordTypeId=Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert acc;

        List<TemasWebClientes__c> listTIs = new List<TemasWebClientes__c>();
        TemasWebClientes__c tiEs = new TemasWebClientes__c(Name='ES_TipoTest1', Idioma__c = 'ES', Texto__c = 'No conforme con 902');
        listTIs.add(tiEs);
        TemasWebClientes__c tiCat = new TemasWebClientes__c(Name='CAT_TipoTest1', Idioma__c = 'ES', Texto__c = 'TipusTest1', Name_Texto_ES__c='ES_TipoTest1');
        listTIs.add(tiCat);
        insert listTIs;

        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionEnviarIncidencia peticion = new WSWebClientes.PeticionEnviarIncidencia();
        peticion.tipoCaso = 'TipusTest1';
        peticion.cliente = String.valueOf(acc.Id);
        peticion.comentarios = 'Comentario test';
        peticion.idioma = 'CAT';

        Test.startTest();
        respuesta = WSWebClientes.enviarIncidencia(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('200', respuesta.codigo);

        List<Case> listCasos = [select Id, Type, Tema__c from Case where AccountId = :acc.Id];
        System.assertNotEquals(null, listCasos);
        System.assertEquals(1, listCasos.size());
        System.assertNotEquals(null, listCasos.get(0));
        System.assertEquals('Consulta', listCasos.get(0).Type);
        System.assertEquals(tiES.Texto__c, listCasos.get(0).Tema__c);*/
        List<Account> acc = Util.generarCuentas(1, 0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert acc;

        List<TiposIncidencias__c> listTIs = new List<TiposIncidencias__c>();
        TiposIncidencias__c tiEs = new TiposIncidencias__c(Name='ES_TipoTest1', Idioma__c = 'ES', Texto__c = 'No conforme con 902');
        listTIs.add(tiEs);
        TiposIncidencias__c tiCat = new TiposIncidencias__c(Name='CAT_TipoTest1', Idioma__c = 'ES', Texto__c = 'TipusTest1', Name_Texto_ES__c='ES_TipoTest1');
        listTIs.add(tiCat);
        insert listTIs;

        WSWebClientes.Resultado respuesta;
        WSWebClientes.PeticionEnviarIncidencia peticion = new WSWebClientes.PeticionEnviarIncidencia();
        peticion.tipoCaso = 'TipusTest1';
        peticion.cliente = String.valueOf(acc[0].Id);
        peticion.comentarios = 'Comentario test';
        peticion.idioma = 'CAT';

        Test.startTest();
        respuesta = WSWebClientes.enviarIncidencia(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);
        System.assertEquals('200', respuesta.codigo);

        List<Case> listCasos = [select Id, Type from Case where AccountId = :acc[0].Id];
        System.assertNotEquals(null, listCasos);
        System.assertEquals(1, listCasos.size());
        System.assertNotEquals(null, listCasos.get(0));
        System.assertEquals(tiES.Texto__c, listCasos.get(0).Type);
    }

    /**
     * Crea una tarea del Tipo 'Otros'con el Estado a 'Revision interior pendiente'
     * 
     * @author pmartin
     * @date 21/02/2020
     */
    @isTest static void solicitarRevisionInteriorTestOK()
    {
        //requiere usuario, dirección de entrega, contrato y contacto/candidato
        List<Account> cuentasList = Util.generarCuentas(1, 0,Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentasList;
        
        List<Account> cuentasQuery = [select Id from Account];
        if(cuentasQuery.size() > 0)
        {
            List<User> usuarios = Util.generarUsuarios(1, 0, cuentasQuery[0]);
            insert usuarios;

            List<Contact> contactosList = Util.generarContactosPrincipales(1, 0, cuentasList);
            insert contactosList;

            Direcci_n_de_entrega__c direccionEntrega = new Direcci_n_de_entrega__c();
            direccionEntrega.cuenta__c = cuentasQuery[0].Id;
            direccionEntrega.Provincia__c= 'Alava/Araba';
            direccionEntrega.Direccion__c = 'Islas Canarias 43';
            direccionEntrega.Estado__c = 'Active';
            direccionEntrega.Deposito__c = 'X8ELT0031';

            insert direccionEntrega;

            List<Direcci_n_de_entrega__c> direccionesEntregaQuery = [select id, Deposito__c from Direcci_n_de_entrega__c];
            if(direccionesEntregaQuery.size() > 0)
            {

                List<Contract> contratosList = Util.generarContratos(1, 0, Util.objectsRecordTypesMap.get('Contract').get('GLP').Id, direccionesEntregaQuery[0], cuentasQuery[0].Id);
                insert contratosList;

                List<Contract> contratosQuery = [select id, Status from Contract];

                if(contratosQuery.size() > 0)
                {
                    contratosQuery[0].Status = 'Activado';
                    update contratosQuery[0];
                }

                List<Contract> contratosAfterUpdate = [select Id from Contract];
                List<User> usuariosQuery = [select id from User];
                List<Contact> contactosQuery = [select id from Contact];
                
                WSWebClientes.PeticionSolicitudRevisionInterior psri = new WSWebClientes.PeticionSolicitudRevisionInterior();
                psri.accountId = cuentasQuery[0].Id;
                psri.numSerie = direccionesEntregaQuery[0].Deposito__c;
                
                List<Task> tasksBefore;
                List<Task> tasksAfter;
                
                tasksBefore = [select Id from Task where WhoId =: psri.accountId];
    
                Test.startTest();
                WSWebClientes.Resultado respuesta = WSWebClientes.solicitarRevisionInterior(psri);
                Test.stopTest();
                // System.assertEquals('200', respuesta.mensaje);
                System.assertEquals('200', respuesta.codigo);
            }
        }
    }

    /**
     * no crea una tarea del Tipo 'Otros'con el Estado a 'Revision interior pendiente' 
     * fallo por dirección de entrega no activa
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void solicitarRevisionInteriorTestConDireccionEntregaNoActiva()
    {
        //requiere usuario, dirección de entrega, contrato y contacto/candidato
        List<Account> cuentasList = Util.generarCuentas(1, 0,Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentasList;
        
        List<Account> cuentasQuery = [select Id from Account];
        if(cuentasQuery.size() > 0)
        {
            List<User> usuarios = Util.generarUsuarios(1, 0, cuentasQuery[0]);
            insert usuarios;

            List<Contact> contactosList = Util.generarContactos(1, 0, cuentasList);
            insert contactosList;

            Direcci_n_de_entrega__c direccionEntrega = new Direcci_n_de_entrega__c();
            direccionEntrega.cuenta__c = cuentasQuery[0].Id;
            direccionEntrega.Provincia__c= 'Alava/Araba';
            direccionEntrega.Direccion__c = 'Islas Canarias 43';
            // direccionEntrega.Estado__c = 'Active';
            direccionEntrega.Deposito__c = 'X8ELT0031';

            insert direccionEntrega;

            List<Direcci_n_de_entrega__c> direccionesEntregaQuery = [select id from Direcci_n_de_entrega__c];
            if(direccionesEntregaQuery.size() > 0)
            {

                List<Contract> contratosList = Util.generarContratos(1, 0, Util.objectsRecordTypesMap.get('Contract').get('GLP').Id, direccionesEntregaQuery[0], cuentasQuery[0].Id);
                insert contratosList;

                List<Contract> contratosQuery = [select id, Status from Contract];

                if(contratosQuery.size() > 0)
                {
                    contratosQuery[0].Status = 'Activado';
                    update contratosQuery[0];
                }

                List<Contract> contratosAfterUpdate = [select Id from Contract];
                List<User> usuariosQuery = [select id from User];
                List<Contact> contactosQuery = [select id from Contact];
                
                WSWebClientes.PeticionSolicitudRevisionInterior psri = new WSWebClientes.PeticionSolicitudRevisionInterior();
                psri.accountId = cuentasQuery[0].Id;
                psri.numSerie = 'X8ELT0031';
                
                List<Task> tasksBefore;
                List<Task> tasksAfter;
                
                tasksBefore = [select Id from Task where WhoId =: psri.accountId];
    
                Test.startTest();
                WSWebClientes.Resultado respuesta = WSWebClientes.solicitarRevisionInterior(psri);
                Test.stopTest();
    
                System.assertEquals('501', respuesta.codigo);
            }
        }
    }

    /**
     * no crea una tarea del Tipo 'Otros'con el Estado a 'Revision interior pendiente' 
     * fallo por contratos no activos
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void solicitarRevisionInteriorTestConContratoNoActivo()
    {
        //requiere usuario, dirección de entrega, contrato y contacto/candidato
        List<Account> cuentasList = Util.generarCuentas(1, 0,Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentasList;
        
        List<Account> cuentasQuery = [select Id from Account];
        if(cuentasQuery.size() > 0)
        {
            List<User> usuarios = Util.generarUsuarios(1, 0, cuentasQuery[0]);
            insert usuarios;

            List<Contact> contactosList = Util.generarContactos(1, 0, cuentasList);
            insert contactosList;

            Direcci_n_de_entrega__c direccionEntrega = new Direcci_n_de_entrega__c();
            direccionEntrega.cuenta__c = cuentasQuery[0].Id;
            direccionEntrega.Provincia__c= 'Alava/Araba';
            direccionEntrega.Direccion__c = 'Islas Canarias 43';
            direccionEntrega.Estado__c = 'Active';
            direccionEntrega.Deposito__c = 'X8ELT0031';

            insert direccionEntrega;

            List<Direcci_n_de_entrega__c> direccionesEntregaQuery = [select id from Direcci_n_de_entrega__c];
            if(direccionesEntregaQuery.size() > 0)
            {

                List<Contract> contratosList = Util.generarContratos(1, 0, Util.objectsRecordTypesMap.get('Contract').get('GLP').Id, direccionesEntregaQuery[0], cuentasQuery[0].Id);
                insert contratosList;

                List<Contract> contratosQuery = [select id, Status from Contract];

                // if(contratosQuery.size() > 0)
                // {
                //     contratosQuery[0].Status = 'Activado';
                //     update contratosQuery[0];
                // }

                List<Contract> contratosAfterUpdate = [select Id from Contract];
                List<User> usuariosQuery = [select id from User];
                List<Contact> contactosQuery = [select id from Contact];
                
                WSWebClientes.PeticionSolicitudRevisionInterior psri = new WSWebClientes.PeticionSolicitudRevisionInterior();
                psri.accountId = cuentasQuery[0].Id;
                psri.numSerie = 'X8ELT0031';
                
                List<Task> tasksBefore;
                List<Task> tasksAfter;
                
                tasksBefore = [select Id from Task where WhoId =: psri.accountId];
    
                Test.startTest();
                WSWebClientes.Resultado respuesta = WSWebClientes.solicitarRevisionInterior(psri);
                Test.stopTest();
    
                System.assertEquals('501', respuesta.codigo);
            }
        }
    }

    /**
     * no crea una tarea del Tipo 'Otros'con el Estado a 'Revision interior pendiente' 
     * fallo por error en cuenta
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void solicitarRevisionInteriorTestConCuentaErronea()
    {
        //requiere usuario, dirección de entrega, contrato y contacto/candidato
        List<Account> cuentasList = Util.generarCuentas(1, 0,Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentasList;
        
        List<Account> cuentasQuery = [select Id from Account];
        if(cuentasQuery.size() > 0)
        {
            List<User> usuarios = Util.generarUsuarios(1, 0, cuentasQuery[0]);
            insert usuarios;

            List<Contact> contactosList = Util.generarContactos(1, 0, cuentasList);
            insert contactosList;

            Direcci_n_de_entrega__c direccionEntrega = new Direcci_n_de_entrega__c();
            direccionEntrega.cuenta__c = cuentasQuery[0].Id;
            direccionEntrega.Provincia__c= 'Alava/Araba';
            direccionEntrega.Direccion__c = 'Islas Canarias 43';
            direccionEntrega.Estado__c = 'Active';
            direccionEntrega.Deposito__c = 'X8ELT0031';

            insert direccionEntrega;

            List<Direcci_n_de_entrega__c> direccionesEntregaQuery = [select id from Direcci_n_de_entrega__c];
            if(direccionesEntregaQuery.size() > 0)
            {

                List<Contract> contratosList = Util.generarContratos(1, 0, Util.objectsRecordTypesMap.get('Contract').get('GLP').Id, direccionesEntregaQuery[0], cuentasQuery[0].Id);
                insert contratosList;

                List<Contract> contratosQuery = [select id, Status from Contract];

                if(contratosQuery.size() > 0)
                {
                    contratosQuery[0].Status = 'Activado';
                    update contratosQuery[0];
                }

                List<Contract> contratosAfterUpdate = [select Id from Contract];
                List<User> usuariosQuery = [select id from User];
                List<Contact> contactosQuery = [select id from Contact];
                
                WSWebClientes.PeticionSolicitudRevisionInterior psri = new WSWebClientes.PeticionSolicitudRevisionInterior();
                psri.accountId = ''; // <------------------ fallo
                psri.numSerie = 'X8ELT0031';
                
                List<Task> tasksBefore;
                List<Task> tasksAfter;
                
                tasksBefore = [select Id from Task where WhoId =: psri.accountId];
    
                Test.startTest();
                WSWebClientes.Resultado respuesta = WSWebClientes.solicitarRevisionInterior(psri);
                Test.stopTest();
    
                System.assertEquals('501', respuesta.codigo);
            }
        }
    }

    /**
     * no crea una tarea del Tipo 'Otros'con el Estado a 'Revision interior pendiente' 
     * fallo por error en numero de serie
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void solicitarRevisionInteriorTestConNumSerieErroneo()
    {
        //requiere usuario, dirección de entrega, contrato y contacto/candidato
        List<Account> cuentasList = Util.generarCuentas(1, 0,Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentasList;
        
        List<Account> cuentasQuery = [select Id from Account];
        if(cuentasQuery.size() > 0)
        {
            List<User> usuarios = Util.generarUsuarios(1, 0, cuentasQuery[0]);
            insert usuarios;

            List<Contact> contactosList = Util.generarContactos(1, 0, cuentasList);
            insert contactosList;

            Direcci_n_de_entrega__c direccionEntrega = new Direcci_n_de_entrega__c();
            direccionEntrega.cuenta__c = cuentasQuery[0].Id;
            direccionEntrega.Provincia__c= 'Alava/Araba';
            direccionEntrega.Direccion__c = 'Islas Canarias 43';
            direccionEntrega.Estado__c = 'Active';
            direccionEntrega.Deposito__c = 'X8ELT0031';

            insert direccionEntrega;

            List<Direcci_n_de_entrega__c> direccionesEntregaQuery = [select id from Direcci_n_de_entrega__c];
            if(direccionesEntregaQuery.size() > 0)
            {

                List<Contract> contratosList = Util.generarContratos(1, 0, Util.objectsRecordTypesMap.get('Contract').get('GLP').Id, direccionesEntregaQuery[0], cuentasQuery[0].Id);
                insert contratosList;

                List<Contract> contratosQuery = [select id, Status from Contract];

                if(contratosQuery.size() > 0)
                {
                    contratosQuery[0].Status = 'Activado';
                    update contratosQuery[0];
                }

                List<Contract> contratosAfterUpdate = [select Id from Contract];
                List<User> usuariosQuery = [select id from User];
                List<Contact> contactosQuery = [select id from Contact];
                
                WSWebClientes.PeticionSolicitudRevisionInterior psri = new WSWebClientes.PeticionSolicitudRevisionInterior();
                psri.accountId = cuentasQuery[0].id;
                psri.numSerie = '';
                
                List<Task> tasksBefore;
                List<Task> tasksAfter;
                
                tasksBefore = [select Id from Task where WhoId =: psri.accountId];
    
                Test.startTest();
                WSWebClientes.Resultado respuesta = WSWebClientes.solicitarRevisionInterior(psri);
                Test.stopTest();
    
                System.assertEquals('501', respuesta.codigo);
            }
        }
    }

    /**
     * recupera la direccion url de 3 documentos diferentes
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void urlDescargaDocumentoPdfTipo0OK()
    {
        WSWebClientes.PeticionUrlDescargaDocumento peticion0 = new WSWebClientes.PeticionUrlDescargaDocumento('0');
        
        // System.debug(peticion0);        
        // peticion0.tipoDeDocumento = '0';
        // System.debug('+++'+peticion0.tipoDeDocumento);
        
        Test.startTest();
        WSWebClientes.RespuestaUrlDescargaDocumentoPdf respuesta0 = WSWebClientes.urlDescargaDocumentoPdf(peticion0);
        Test.stopTest();

        System.assert(respuesta0.url != '');
        System.assertEquals(respuesta0.resultado.codigo, '200');
        // System.debug('0'+respuesta0.url);
    }

    /**
     * recupera la direccion url del tipo de documento 1
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void urlDescargaDocumentoPdfTipo1OK()
    {
        WSWebClientes.PeticionUrlDescargaDocumento peticion1 = new WSWebClientes.PeticionUrlDescargaDocumento('1');
        
        // System.debug(peticion1);   
        // peticion1.tipoDeDocumento = '0';
        // System.debug('+++'+peticion1.tipoDeDocumento);

        Test.startTest();
        WSWebClientes.RespuestaUrlDescargaDocumentoPdf respuesta1 = WSWebClientes.urlDescargaDocumentoPdf(peticion1);
        Test.stopTest();
                
        System.assert(respuesta1.url != '');
        System.assertEquals(respuesta1.resultado.codigo, '200');
        // System.debug('1'+respuesta1.url);
    }
    /**
     * recupera la direccion url del tipo de documento 2
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void urlDescargaDocumentoPdfTipo2OK()
    {
        WSWebClientes.PeticionUrlDescargaDocumento peticion2 = new WSWebClientes.PeticionUrlDescargaDocumento('2');

        // System.debug(peticion2);        
        // peticion2.tipoDeDocumento = '2';
        // System.debug('+++'+peticion2.tipoDeDocumento);
        
        Test.startTest();
        WSWebClientes.RespuestaUrlDescargaDocumentoPdf respuesta2 = WSWebClientes.urlDescargaDocumentoPdf(peticion2);
        Test.stopTest();
                
        System.assert(respuesta2.url != '');
        System.assertEquals(respuesta2.resultado.codigo, '200');
        // System.debug('2'+respuesta2.url);
    }

    /**
     * no recupera ninguna url por que el tipo no es válido
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void urlDescargaDocumentoPdfTipoNoValido()
    {
        WSWebClientes.PeticionUrlDescargaDocumento peticion4 = new WSWebClientes.PeticionUrlDescargaDocumento('4');

        // System.debug(peticion2);        
        // peticion2.tipoDeDocumento = '2';
        // System.debug('+++'+peticion2.tipoDeDocumento);
        
        Test.startTest();
        WSWebClientes.RespuestaUrlDescargaDocumentoPdf respuesta4 = WSWebClientes.urlDescargaDocumentoPdf(peticion4);
        Test.stopTest();
                
        System.assert(respuesta4.url == '');
        System.assertNotEquals(respuesta4.resultado.codigo, '200');
        // System.debug('2'+respuesta2.url);
    }

    /**
     * procesa y valida el IBAN de una cuenta
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void procesarIBANTest()
    {
        WSWebClientes.PeticionProcesarIBAN peticion = new WSWebClientes.PeticionProcesarIBAN();

        List<Account> cuentas = Util.generarCuentas(1,0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentas;

        List<Account> cuentasQuery = [select Id from Account];
        
        if(cuentasQuery.size() > 0)
        {
            peticion.accountId = cuentasQuery[0].Id;
            peticion.IBAN = 'ES9520802926515599673627'; // generado aleatoriamente            
        }

        Test.startTest();
        WSWebClientes.Resultado resultado = WSWebClientes.procesarIBAN(peticion);
        Test.stopTest();            

        System.assertEquals('200', resultado.codigo);
    }
    /**
     * no procesa correctamente por fallo en IBAN
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void procesarIBANTestFalloEnIBAN()
    {
        WSWebClientes.PeticionProcesarIBAN peticion = new WSWebClientes.PeticionProcesarIBAN();

        List<Account> cuentas = Util.generarCuentas(1,0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentas;

        List<Account> cuentasQuery = [select Id from Account];
        
        if(cuentasQuery.size() > 0)
        {
            peticion.accountId = cuentasQuery[0].Id;
            peticion.IBAN = ''; // generado aleatoriamente            
        }

        Test.startTest();
        WSWebClientes.Resultado resultado = WSWebClientes.procesarIBAN(peticion);
        Test.stopTest();            
        System.debug(resultado.codigo);
        System.assertEquals('501', resultado.codigo);
    }

    /**
     * no procesa correctamente por fallo en accountId
     * 
     * @author pmartin
     * @date 02/03/2020
     */
    @isTest static void procesarIBANTestFalloEnAccountId()
    {
        WSWebClientes.PeticionProcesarIBAN peticion = new WSWebClientes.PeticionProcesarIBAN();

        List<Account> cuentas = Util.generarCuentas(1,0, Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id);
        insert cuentas;

        List<Account> cuentasQuery = [select Id from Account];
        
        if(cuentasQuery.size() > 0)
        {
            peticion.accountId = 'asdf';
            peticion.IBAN = 'ES9520802926515599673627'; // generado aleatoriamente            
        }

        Test.startTest();
        WSWebClientes.Resultado resultado = WSWebClientes.procesarIBAN(peticion);
        Test.stopTest();            

        System.assertEquals('501', resultado.codigo);
    }
    /*
        ======================================================================================
        * -- PRECIO PEDIDO DE GAS  -----------------------------------------------------------
        ======================================================================================
    */
    @isTest 
    static void consultarPrecioPedidoGas_FaltanDatos()
    {
        casosConsultaPrecio(0);
    }

    @isTest 
    static void consultarPrecioPedidoGas_SinContrato()
    {
        casosConsultaPrecio(1);
    }

    @isTest 
    static void consultarPrecioPedidoGas_SinPrecioActual()
    {
        casosConsultaPrecio(2);
    }

    @isTest 
    static void consultarPrecioPedidoGas_SinDeposito()
    {
        casosConsultaPrecio(3);
    }

    @isTest 
    static void consultarPrecioPedidoGas_Correcto()
    {
        casosConsultaPrecio(4);
    }

    private static void casosConsultaPrecio(Integer caso)
    {
        List<Account> cuentasList = generarCuentas(1);
        insert cuentasList;

        Map<Id, List<Direcci_n_de_entrega__c>> direccionesMap = generarDirecciones(cuentasList, 1);
        List<Direcci_n_de_entrega__c> direccionesList = new List<Direcci_n_de_entrega__c>();
        for(Id cuenta : direccionesMap.keySet())
        {
            direccionesList.addAll(direccionesMap.get(cuenta));
        }
        //El caso 2 prueba que la direccion no tenga un precio actual
        if(caso == 2)
        {
            for(Direcci_n_de_entrega__c dir : direccionesList)
            {
                dir.Precio_actual__c = '0.0';
            }
        }
        insert direccionesList;
        //El caso 1 prueba que no exista un contrato
        if(caso != 1)
        {
            Map<Id, List<Contract>> contratosMap = generarContratos(cuentasList, direccionesMap);
            List<Contract> contratosList = new List<Contract>();
            for(Id cuenta : contratosMap.keySet())
            {
                contratosList.addAll(contratosMap.get(cuenta));
            }
            //El caso 3 prueba que el tanque no tenga capacidad
            //gserrano 17-1-2019 se comenta esta aprte proque ahora la capacidad de tanque se recibe en la petición
            /*if(caso == 3)
            {
                for(Contract contrato : contratosList)
                {
                    contrato.Capacidad_tanque__c = 0;
                }
            }*/
            insert contratosList;

            for(Contract contrato : contratosList)
            {
                contrato.Status = 'Activado';
            }
            update contratosList;
        }
        
        WSWebClientes.RespuestaConsultaPrecio respuesta;
        WSWebClientes.PeticionConsultaPrecio peticion = new WSWebClientes.PeticionConsultaPrecio();
        peticion.idioma          = 'ES';
        peticion.idCliente       = String.valueOf(cuentasList[0].Id);
        peticion.idDirNav        = '0';
        peticion.capacidadTanque = '0';
        //El caso 0 prueba que falte algún dato en la petición
        if(caso != 0)
        {
            peticion.nivelActual    = '30';
        }
        if(caso != 3)
        {
            peticion.capacidadTanque = '2000';
        }
        
        Test.startTest();
        respuesta = WSWebClientes.consultarPrecioPedidoGas(peticion);
        Test.stopTest();

        System.debug(respuesta);
        
        System.assertNotEquals(null, respuesta);

        switch on caso 
        {
            when 0 {
                System.assertEquals('501', respuesta.resultado.codigo);
                System.assertEquals('No se han indicado todos los datos necesarios para realizar esta acción', respuesta.resultado.mensaje);   
            }   
            when 1 {
                System.assertEquals('501', respuesta.resultado.codigo);
                System.assertEquals('No se ha encontrado el contrato.', respuesta.resultado.mensaje);            
            }
            when 2 {
                System.assertEquals('501', respuesta.resultado.codigo);
                System.assertEquals('No se ha podido recuperar la información del precio actual.', respuesta.resultado.mensaje);            
            }
            when 3 {
                System.assertEquals('501', respuesta.resultado.codigo);
                System.assertEquals('No se ha podido recuperar la información del depósito.', respuesta.resultado.mensaje);            
            }
            when else {       
                System.assertEquals('200', respuesta.resultado.codigo);
                System.assertEquals('', respuesta.resultado.mensaje);
                System.assertEquals( 849.75, respuesta.costeLlenado);
            }
        }
        //System.assertEquals(, respuesta.costeLlenado);
    }

    private static List<Account> generarCuentas(Integer numCuentas)
    {
        List<Account> cuentasList       = new List<Account>();
        List<Contract> contratosList    = new List<Contract>();

        for(Integer i = 0 ; i < numCuentas ; i++)
        {
            cuentasList.add(new Account(
                                Name    = 'CuentaTest'+i, 
                                Phone   = String.valueOf(i), 
                                RecordTypeId = Util.objectsRecordTypesMap.get('Account').get('Cliente_existente').Id
                ));
        }
        return cuentasList;
    }
    
    private static Map<Id, List<Direcci_n_de_entrega__c>> generarDirecciones(List<Account> cuentasList, Integer numDirecciones)
    {
        Map<Id, List<Direcci_n_de_entrega__c>> direccionesMap = new Map<Id, List<Direcci_n_de_entrega__c>>();

        for(Account cuenta : cuentasList)
        {
            direccionesMap.put(cuenta.Id, new List<Direcci_n_de_entrega__c>());
            for(Integer i = 0 ; i < numDirecciones ; i++)
            {
                direccionesMap.get(cuenta.Id).add(new Direcci_n_de_entrega__c(
                                                    Cuenta__c       = cuenta.Id, 
                                                    Direccion__c    = 'Dir1Test', 
                                                    Direccion_2__c  = 'Dir2Test', 
                                                    Provincia__c    = 'Bizkaia', 
                                                    Codigo_Postal__c= '23455', 
                                                    Poblacion__c    = 'PoblTest',
                                                    Id_Navision__c  = String.valueOf(i),
                                                    Precio_actual__c= '1.5'
                                                    ));
            }
        }
        return direccionesMap;
    }
    
    private static Map<Id, List<Contract>> generarContratos(List<Account> cuentasList,  Map<Id, List<Direcci_n_de_entrega__c>> direccionesMap)
    {
        Map<Id, List<Contract>> contratosMap = new Map<Id, List<Contract>>();

        for(Account cuenta : cuentasList)
        {
            contratosMap.put(cuenta.Id, new List<Contract>());
            for(Direcci_n_de_entrega__c dir: direccionesMap.get(cuenta.Id))
            {
                contratosMap.get(cuenta.Id).add(new Contract(
                                        Name                            = 'ContrTest', 
                                        AccountId                       = cuenta.Id, 
                                        Duraci_n_del_contrato_a_os__c   = '2', 
                                        StartDate                       = Date.today().addYears(-1), 
                                        ContractTerm                    = 24,
                                        Direccion_de_entrega__c         = dir.Id,
                                        Capacidad_tanque__c             = 2000
                                        ));
            }
        }
        return contratosMap;
    }
}